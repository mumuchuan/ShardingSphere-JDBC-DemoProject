# 数据源配置
# 数据源名称，多数据源以逗号分隔
spring.shardingsphere.datasource.names= write-ds0,write-ds1,write-ds0-read0,write-ds1-read0

spring.shardingsphere.datasource.write-ds0.url=jdbc:mysql://localhost:3306/ds_master_0?useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true&serverTimezone=UTC
spring.shardingsphere.datasource.write-ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.write-ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.write-ds0.username=root
spring.shardingsphere.datasource.write-ds0.password=hb135119
spring.shardingsphere.datasource.write-ds0.max-active=16

spring.shardingsphere.datasource.write-ds1.url=jdbc:mysql://localhost:3306/ds_master_1?useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true&serverTimezone=UTC
spring.shardingsphere.datasource.write-ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.write-ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.write-ds1.username=root
spring.shardingsphere.datasource.write-ds1.password=hb135119
spring.shardingsphere.datasource.write-ds1.max-active=16

spring.shardingsphere.datasource.write-ds0-read0.url=jdbc:mysql://localhost:3306/ds_master_0_slave_0?useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true&serverTimezone=UTC
spring.shardingsphere.datasource.write-ds0-read0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.write-ds0-read0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.write-ds0-read0.username=root
spring.shardingsphere.datasource.write-ds0-read0.password=hb135119
spring.shardingsphere.datasource.write-ds0-read0.max-active=16

spring.shardingsphere.datasource.write-ds1-read0.url=jdbc:mysql://localhost:3306/ds_master_1_slave_0?useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true&serverTimezone=UTC
spring.shardingsphere.datasource.write-ds1-read0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.write-ds1-read0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.write-ds1-read0.username=root
spring.shardingsphere.datasource.write-ds1-read0.password=hb135119
spring.shardingsphere.datasource.write-ds1-read0.max-active=16


# 分片规则配置
# 分库策略
spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-column=user_id
spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-algorithm-name=default-database-strategy-inline
# 绑定表规则，多组绑定规则使用数组形式配置
spring.shardingsphere.rules.sharding.binding-tables[0]=t_order,t_order_item
# 广播表规则配置
spring.shardingsphere.rules.sharding.broadcast-tables= t_address

# 分表策略
# 表达式 `ds_$->{0..1}`枚举的数据源为读写分离配置的逻辑数据源名称
spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=ds_$->{0..1}.t_order_$->{0..1}
spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=user_id
spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=order-table-strategy-inline

spring.shardingsphere.rules.sharding.tables.t_order_item.actual-data-nodes=ds_$->{0..1}.t_order_item_$->{0..1}
spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-column=user_id
spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-algorithm-name=order-item-table-strategy-inline

# 数据加密配置
# `t_order` 使用分片规则配置的逻辑表名称
spring.shardingsphere.rules.encrypt.tables.t_order.columns.status.cipher-column=status
spring.shardingsphere.rules.encrypt.tables.t_order.columns.status.encryptor-name=status-encryptor

# 数据加密算法配置
spring.shardingsphere.rules.encrypt.encryptors.status-encryptor.type=AES
spring.shardingsphere.rules.encrypt.encryptors.status-encryptor.props.aes-key-value=123456abc

# 分布式序列策略配置
spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.column=order_id
spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.key-generator-name=snowflake

# 分片算法配置
spring.shardingsphere.rules.sharding.sharding-algorithms.default-database-strategy-inline.type=INLINE
# 表达式`ds_$->{user_id % 2}` 枚举的数据源为读写分离配置的逻辑数据源名称
spring.shardingsphere.rules.sharding.sharding-algorithms.default-database-strategy-inline.algorithm-expression=ds_$->{order_id % 2}
spring.shardingsphere.rules.sharding.sharding-algorithms.order-table-strategy-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.order-table-strategy-inline.algorithm-expression=t_order_$->{user_id % 2}

spring.shardingsphere.rules.sharding.sharding-algorithms.order-item-table-strategy-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.order-item-table-strategy-inline.algorithm-expression=t_order_item_$->{user_id % 2}

# 分布式序列算法配置
spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
# 分布式需要配置下面这项#本机唯一标识
spring.shardingsphere.rules.sharding.key-generators.snowflake.props.worker-id=123

# 读写分离策略配置
# ds_0,ds_1为读写分离配置的逻辑数据源名称
spring.shardingsphere.rules.readwrite-splitting.data-sources.ds_0.write-data-source-name=write-ds0
spring.shardingsphere.rules.readwrite-splitting.data-sources.ds_0.read-data-source-names=write-ds0-read0
spring.shardingsphere.rules.readwrite-splitting.data-sources.ds_0.load-balancer-name=read-random
spring.shardingsphere.rules.readwrite-splitting.data-sources.ds_1.write-data-source-name=write-ds1
spring.shardingsphere.rules.readwrite-splitting.data-sources.ds_1.read-data-source-names=write-ds1-read0
spring.shardingsphere.rules.readwrite-splitting.data-sources.ds_1.load-balancer-name=read-random

# 负载均衡算法配置
spring.shardingsphere.rules.readwrite-splitting.load-balancers.read-random.type=RANDOM